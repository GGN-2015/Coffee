VAR BUILTIN_COMPACT_BUF[129]


FUNC print(pArr)
    VAR i
    i := 0
    WHILE VARAT(pArr + 2 * i) <> 0 LOOP
        PUTCHAR(VARAT(pArr + 2 * i))
        i := i + 1
    ENDWHILE
ENDFUNC


FUNC printInt(x)
    VAR stk[10], stktop
    stktop := 0
    IF x = 0 THEN
        PUTCHAR('0')
    ELSE
        WHILE x <> 0 LOOP
            stk[stktop] := x % 10
            x := x / 10
            stktop := stktop + 1
        ENDWHILE
        WHILE stktop > 0 LOOP
            PUTCHAR(stk[stktop - 1] + 48)
            stktop := stktop - 1
        ENDWHILE
    ENDIF
    PUTCHAR(' ')
ENDFUNC


FUNC compact(pArr)          ; use this function to load string into compact mode
    ASM("MOV SI, [BP-2]")   ; especially for inner ASM
    ASM("LEA DI, GLOBAL_BUILTIN_COMPACT_BUF")
    ASM("INNER_ASM_FLAG_1:")
    ASM("MOV AX, [SI]")
    ASM("MOV BYTE PTR [DI], AL")
    ASM("ADD SI, 2")
    ASM("INC DI")
    ASM("AND AX, AX")
    ASM("JNZ INNER_ASM_FLAG_1")
ENDFUNC


FUNC readFile(pFileName)
    CALL compact(pFileName)              ; get compact filename
    ASM("MOV AH, 3DH")                   ; int = open file
    ASM("MOV AL, 0")                     ;   mode: read
    ASM("LEA DX, GLOBAL_BUILTIN_COMPACT_BUF") ;   set filename
    ASM("INT 21H")                       ; int
    ASM("JC READ_FILE_ERR")              ; if no error
    ASM("JMP ENDFUNC_readFile")          ;   return AX
    ASM("READ_FILE_ERR:")                ; else
    ASM("MOV AX, -1")                    ;   return -1
ENDFUNC


FUNC createFile(pFileName, intMode)
    CALL compact(pFileName)              ; get compact filename
    ASM("MOV AH, 3CH")                   ; int = create file
    ASM("LEA DX, GLOBAL_BUILTIN_COMPACT_BUF") ;   set filename
    ASM("MOV CX, [BP-4]")                ;   set mode
    ASM("INT 21H")                       ; int, no error return AX = 0
ENDFUNC


FUNC delFile(pFileName)
    CALL compact(pFileName)              ; get compact filename
    ASM("MOV AH, 41H")                   ; int = delete file
    ASM("LEA DX, GLOBAL_BUILTIN_COMPACT_BUF") ;   set filename
    ASM("INT 21H")                       ; int, no error return AX = 0
ENDFUNC


FUNC writeFile(pFileName)
    CALL createFile(pFileName, 0)        ; create new file and delete old one
    ASM("MOV AH, 3DH")                   ; int = open file
    ASM("MOV AL, 1")                     ;   mode: write
    ASM("LEA DX, GLOBAL_BUILTIN_COMPACT_BUF") ;   set filename
    ASM("INT 21H")                       ; int
    ASM("JC WRITE_FILE_ERR")             ; if no error
    ASM("JMP ENDFUNC_writeFile")         ;   return AX
    ASM("WRITE_FILE_ERR:")               ; else
    ASM("MOV AX, -1")                    ;   return -1
ENDFUNC


FUNC closeFile(fp)                       ;
    ASM("MOV AH, 3EH")                   ; int = close file
    ASM("MOV BX, [BP-2]")                ;   handle = fp
    ASM("INT 21H")                       ; int then RETURN AX
ENDFUNC


FUNC fgetc(fpin)
    VAR chTmp
    chTmp := 0
    ASM("MOV AH, 3FH")                   ; int = read file
    ASM("MOV BX, [BP-2]")                ;   FILE* = fpin
    ASM("LEA DX, [BP-4]")                ;   store to chTmp
    ASM("MOV CX, 1")                     ;   readCnt = 1
    ASM("INT 21H")                       ; int
    ASM("AND AX, AX")                    ; AX: is the realtime readCnt
    ASM("JNZ FGETC_FILE_NOT_END")        ; if AX = 0
    ASM("MOV AX, -1")                    ;   return = EOF
    ASM("JMP ENDFUNC_fgetc")             ;   return
    ASM("FGETC_FILE_NOT_END:")
    RETURN chTmp
ENDFUNC


FUNC fputc(fpout, chTmp)
    ASM("MOV AH, 40H")                   ; int = write file
    ASM("MOV BX, [BP-2]")                ;   FILE* = fpout
    ASM("LEA DX, [BP-4]")                ;   store to chTmp
    ASM("MOV CX, 1")                     ;   readCnt = 1
    ASM("INT 21H")                       ; int
    ASM("AND AX, AX")                    ; AX: is the realtime readCnt
    ASM("JNZ FPUTC_FILE_NOT_END")        ; if AX = 0
    ASM("MOV AX, -1")                    ;   return = EOF
    ASM("JMP ENDFUNC_fgetc")             ;   return
    ASM("FPUTC_FILE_NOT_END:")
    RETURN chTmp
ENDFUNC


FUNC showFile(pFileName)
    VAR fpin, ch
    fpin := readFile(pFileName)      ; just open a file, save handle to fpin
    IF fpin = -1 THEN                ; fpin = -1 means fail to open file
        CALL print("FAIL TO OPENFILE\n")
        RETURN
    ENDIF
    ch := fgetc(fpin)
    WHILE ch <> -1 LOOP
        PUTCHAR(ch)
        ch := fgetc(fpin)
    ENDWHILE
    CALL closeFile(fpin)
ENDFUNC


FUNC setFile(pFileName, pString)
    VAR fpout, ch
    fpout := writeFile(pFileName)
    IF fpout = -1 THEN
        CALL print("FAIL TO CLOSEFILE\n")
        RETURN
    ENDIF
    VAR i
    i := 0
    WHILE VARAT(pString + 2 * i) <> 0 LOOP
        CALL fputc(fpout, VARAT(pString + 2 * i))
        i := i + 1
    ENDWHILE
    CALL closeFile(fpout)
ENDFUNC
